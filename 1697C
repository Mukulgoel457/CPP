//------------------Mukul457-----------------------------------

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
//template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

ll mod = 1e9 + 7;
const int inf= 1e5+1;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}

bool isvalid(ll x,ll y,ll n,ll m){
    return x>=0 && y>=0 && x<n && y<m ;
}

int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}

ll ciel(ll a,ll b){
    if(a%b){return a/b+1;}
    else{return a/b;}
}

void solve(){
    ll n;
    cin>>n;
    string s,t;
    cin>>s>>t;
    if(s==t){
        pyes;
        return;
    }
    string a=s,b=t;
    srt(a);
    srt(b);
    if(a!=b){
        pno;
        return;
    }
    a="",b="";
    set<ll> s1,s2,s3,s4;
    for(ll i=0;i<n;i++){
        if(s[i]!='b'){
                a+=s[i];
                if(s[i]=='a') s1.insert(i);
                else s3.insert(i);
        }
        if(t[i]!='b'){
                b+=t[i];
                if(t[i]=='a')s2.insert(i);
                else s4.insert(i);
        }
    }
    if(a==b){
        while(s1.size()>0){
            ll x=*s1.begin();
            ll y=*s2.begin();
            if(x>y){
                pno;
                return;
            }
            s1.erase(x);
            s2.erase(y);
        }
        while(s3.size()>0){
            ll x=*s3.begin();
            ll y=*s4.begin();
            if(x<y){
                pno;
                return;
            }
            s3.erase(x);
            s4.erase(y);
        }
        pyes;
    }
    else pno;
}

int main(){
    int t=1;
    ios::sync_with_stdio(false);
    cin>>t;
    while(t--){
        solve();
    }
}

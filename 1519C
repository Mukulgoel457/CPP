//May the code be with you!


#include <bits/stdc++.h>
using namespace std;
template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "Yes\n"
#define pno cout << "No\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
const ll mod = 1e9 + 7;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}
bool is_prime[1000000];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}

ll dfs(ll node, ll par, vector<vector<ll>>& adj)
{
    ll height = 1;
    for (auto nbr : adj[node])
    {
        if (nbr != par)
        {
            height = max(height, dfs(nbr, node, adj) + 1);
        }
    }
    return height;
}

map<ll,vector<ll>> edge;
map<ll,ll>visited,parent;
void bfs(ll num){
     visited[num] = 1;

     for(ll x:edge[num])
     {
        if(visited[x]==0)
        {
            parent[x] = num;
            bfs(x);
        }
     }
}

int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}

void solve(){
    ll n;
    cin>>n;
    ll ans[n]={0};
    vp v;
    map<ll,vector<ll>> a,presum;
    for(ll i=0;i<n;i++){
        ll x;
        cin>>x;
        v.pb({x,0});
    }
    for(ll i=0;i<n;i++){
        ll x;
        cin>>x;
        v[i].se=x;
        a[v[i].fi-1].pb(x);
    }
    for(ll i=0;i<n;i++){
        srt(a[i]);
        rev(a[i]);
        ll t=0;
        if(a[i].size()==0){
            continue;
        }
        for(auto x:a[i]){
            t+=x;
            presum[i].pb(t);
        }
    }
    for(ll i=0;i<n;i++){
            ll k=0;
        if(a[i].size()==0){
            continue;
        }
        for(ll j=1;j<=presum[i].size();j++){
            if(k<=presum[i].size()){
                ans[j-1]+=presum[i][presum[i].size()-(presum[i].size()%j)-1];
                k++;
            }
        }
    }
    for(ll i=0;i<n;i++){
        printb(ans[i]);
    }
    ce;
}

int main(){
    ll t=1;
    ios::sync_with_stdio(false);
    cin>>t;
    while(t--){
        solve();
    }
}

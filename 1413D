//May the code be with you!


#include <bits/stdc++.h>
#include<chrono>
using namespace std;
template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
ll mod = 1e9 + 7;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}
bool is_prime[1000000];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}

ll dfs(ll node, ll par, vector<vector<ll>>& adj)
{
    ll height = 1;
    for (auto nbr : adj[node])
    {
        if (nbr != par)
        {
            height = max(height, dfs(nbr, node, adj) + 1);
        }
    }
    return height;
}

map<ll,vector<ll>> edge;
map<ll,ll>visited,parent;
void bfs(ll num){
     visited[num] = 1;

     for(ll x:edge[num])
     {
        if(visited[x]==0)
        {
            parent[x] = num;
            bfs(x);
        }
     }
}

int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}

vll kmp(string s) {
    ll n = s.length();
    vll prefix(n, 0);

    for (ll i = 1; i < n; ++i) {
        ll j = prefix[i - 1];

        while (j > 0 && s[i] != s[j]) {
            j = prefix[j - 1];
        }

        if (s[i] == s[j]) {
            ++j;
        }

        prefix[i] = j;
    }
    return prefix;
}

void solve(){
    ll n;
    cin>>n;
    vll v(n,0);
    vp order;
    ll z=1;
    bool a=true;
    set<ll> s;
    for(ll i=0;i<2*n;i++){
        char x;
        cin>>x;
        if(x=='+'){
            s.insert(z);
            z++;
            order.pb({1,0});
        }
        else{
            ll y;
            cin>>y;
            if(s.size()>0){
                auto it=s.end();
                it--;
                v[*it-1]=y;
                s.erase(it);
            }
            else a=false;
            if(y>n) a=false;
            order.pb({2,y});
        }
        if(s.size()>n) a=false;
    }
    if(a){
        ll j=0;
        s.clear();
        for(ll i=0;i<2*n;i++){
            if(order[i].fi==1){
                s.insert(v[j]);
                j++;
            }
            else{
                auto it=s.begin();
                if(*it<order[i].se){
                        pno;
                        return;
                }
                s.erase(*it);
            }
        }
        pyes;
        for(ll i=0;i<n;i++) printb(v[i]);
    }
    else pno;
}

int main(){
    ll t=1;
    ios::sync_with_stdio(false);
    //cin>>t;
    while(t--){
        solve();
    }
}

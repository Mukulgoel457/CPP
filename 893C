//May the code be with you!


#include <bits/stdc++.h>
using namespace std;
template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
const ll mod = 1e9 + 7;
const int NUM = 2e5 + 7;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}
bool is_prime[1000005];
bool vis[NUM];
vll g[NUM];
vll order,v;

ll dfs(ll src)
{
    ll sum=v[src];
    vis[src] = true;
    for (auto child : g[src])
    {
        if (vis[child])
            continue;
    sum = min(sum,dfs(child));
    }
    return sum;
//    order.pb(src); // inputs in inc order of out time
}

void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}
int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
}

void solve(){
    ll n,m,ans=0;
    cin>>n>>m;
  //  vll v;
    for(ll i=0;i<n;i++){
        ll x;
        cin>>x;
        v.pb(x);
        vis[i]=false;
    }
    for(ll i=0;i<m;i++){
        ll x,y;
        cin>>x>>y;
        g[x-1].pb(y-1);
        g[y-1].pb(x-1);
    }
    for(ll i=0;i<n;i++){
        if(!vis[i]){
       ans+= dfs(i);
        }
    }
    print(ans);
}

int main(){
    ll t=1;
    ios::sync_with_stdio(false);
    //cin>>t;
    while(t--){
        solve();
    }
}

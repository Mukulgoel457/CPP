//May the code be with you!


#include <bits/stdc++.h>
using namespace std;
template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
const ll mod = 1e9 + 7;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}
bool is_prime[1000000];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}

ll dfs(ll node, ll par, vector<vector<ll>>& adj)
{
    ll height = 1;
    for (auto nbr : adj[node])
    {
        if (nbr != par)
        {
            height = max(height, dfs(nbr, node, adj) + 1);
        }
    }
    return height;
}

int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
}
vll x;
void solve(){
   string s;
   cin>>s;
   ll t=1,k=1;
   ll n=s.length();
   vll v;
   for(ll i=0;i<n;i++){
        if(s[i]=='m' || s[i]=='w'){
            print(0);
            return;
        }
        if(s[i]=='u' && s[i+1]==s[i] && i<n-1){
            k++;
        }
        else{
            if(k>1){v.pb(k);}
            k=1;
        }
        if(s[i]=='n' && s[i+1]==s[i] && i<n-1){
            t++;
        }
        else{
            if(t>1){v.pb(t);}
            t=1;
        }
   }
   ll ans=1;
   for(ll i=0;i<v.size();i++){
        ans*=x[v[i]-1];
        ans = (ans % 1000000007) ;
   }
   print(ans);
}

int main(){
    ll t=1;
    ios::sync_with_stdio(false);
    //cin>>t;
    ll a=1,z=1;
    x.pb(1);
    x.pb(2);
    for(ll i=0;i<=100000;i++){
        x.pb(x[i]+x[i+1]);
        x[i+2]%=1000000007;
    }
    while(t--){
        solve();
    }
}

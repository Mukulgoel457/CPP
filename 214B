//------------------Mukul457-----------------------------------

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define seev(v,n) for(ll i=0;i<n;i++){ll x; cin>>x; v.push_back(x);}
//typedef tree<ll,null_type,less_equal<ll>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

ll mod = 1e9 + 7;
const ll inf= 1e18;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}

ll binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}

bool is_prime[1000005];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}
ll ciel(ll a,ll b){
    if(a%b){return a/b+1;}
    else{return a/b;}
}

void solve(){
    ll n,sum=0;
    cin>>n;
    string a="";
    map<ll,vll> m;
    for(ll i=0;i<n;i++){
        ll x;
        cin>>x;
        a+=to_string(x);
        sum+=x;
        m[x%3].pb(x);
    }
    srt(a);
    if(a[0]!='0'){
        print(-1);
        return;
    }
    if(m[1].size()>0) srt(m[1]);
    if(m[2].size()>0) srt(m[2]);
    if(sum%3==0){
        srt(a);rev(a);
        if(a[0]=='0') print(0);
        else print(a);
        return;
    }
    ll k=sum%3;
    if(k>0 && m[k].size()>0){
        string x=to_string(m[k][0]);
        a.erase(a.find(x),1);
        srt(a);rev(a);
        if(a[0]=='0') print(0);
        else print(a);
        return;
    }
    if(k==1){
        string x=to_string(m[2][0]);
        a.erase(a.find(x),1);
        x=to_string(m[2][1]);
        a.erase(a.find(x),1);
        srt(a);rev(a);
        if(a[0]=='0') print(0);
        else print(a);
        return;
    }
    if(k==2){
        string x=to_string(m[1][0]);
        a.erase(a.find(x),1);
        x=to_string(m[1][1]);
        a.erase(a.find(x),1);
        srt(a);rev(a);
        if(a[0]=='0') print(0);
        else print(a);
        return;
    }
}

int main(){
    int t=1;
    ios::sync_with_stdio(false);
    cin.tie(0);
    //cin>>t;
    while(t--){
        solve();
    }
}

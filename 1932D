//------------------Mukul457-----------------------------------

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define seev(v,n) for(ll i=0;i<n;i++){ll x; cin>>x; v.push_back(x);}
//typedef tree<ll,null_type,less_equal<ll>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

ll mod = 1e9 + 7;
const ll inf= 1e18;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}

ll binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}

vll kmp(string s) {
    ll n = s.length();
    vll prefix(n, 0);

    for (ll i = 1; i < n; ++i) {
        ll j = prefix[i - 1];

        while (j > 0 && s[i] != s[j]) j = prefix[j - 1];
        if (s[i] == s[j]) ++j;
        prefix[i] = j;
    }
    return prefix;
}

bool is_prime[1000005];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}

ll ciel(ll a,ll b){
    if(a%b){return a/b+1;}
    else{return a/b;}
}

void solve(){
    ll n;
    char main;
    cin>>n>>main;
    n*=2;
    vector<string> v;
    map<char,ll> m;
    map<char,vector<string>> ans;
    for(ll i=0;i<n;i++){
        string s;
        cin>>s;
        m[s[1]]++;
        ans[s[1]].pb(s);
        v.pb(s);
    }
    srt(v);
    ll k=0;
    for(auto x:m){
        if(x.fi!=main && x.se%2!=0) k++;
    }
    for(auto x:ans) srt(ans[x.fi]);
    vector<string> z=ans[main];
    if(k>m[main] || k%2!=m[main]%2){
            print("IMPOSSIBLE");
            return;
    }
    k=0;
    for(auto x:ans){
        if(x.fi==main) continue;
        for(ll i=0;i<ans[x.fi].size();i+=2){
            if(i+2>ans[x.fi].size()){
                printb(ans[x.fi][i]);
                print(ans[main][k]);
                k++;
                break;
            }
            printb(ans[x.fi][i]);
            print(ans[x.fi][i+1]);
        }
    }
    for(ll i=k;i<m[main];i+=2){
        printb(ans[main][i]);
        print(ans[main][i+1]);
    }
}

int main(){
    int t=1;
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin>>t;
    while(t--){
        solve();
    }
}

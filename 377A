//May the code be with you!


#include <bits/stdc++.h>
#include<chrono>
using namespace std;
//template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
const ll N = 510;
const ll N2 =2600;
const ll INF= 1e18;
const ll N3 = 510;


bool isvalid(ll x,ll y){
    return x>=0 && y>=0 && x<N && y<N ;
}
vector<pair<int,int>> movement = {
    {-1,1},{1,1},
    {-1,-1},{1,-1},
};

char g[N][N];
bool vis[N][N];
ll level[N][N];
void bfs(ll sourcex,ll sourcey){
    queue<pair<ll,ll>> q;
    q.push({sourcex,sourcey});
    level[sourcex][sourcey]=0;
    vis[sourcex][sourcey] = true;
    while(!q.empty()){
        pair<ll,ll> cur = q.front();
        ll x=cur.fi;
        ll y=cur.se;
        q.pop();
        if(isvalid(x+1,y)){
            if(g[x+1][y]=='.' && !vis[x+1][y]){
                q.push({x+1,y});
                vis[x+1][y]=true;
                level[x+1][y]=level[x][y]+1;
            }
        }
        if(isvalid(x-1,y)){
            if(g[x-1][y]=='.' && !vis[x-1][y]){
                q.push({x-1,y});
                vis[x-1][y]=true;
                level[x-1][y]=level[x][y]+1;
            }
        }
        if(isvalid(x,y+1)){
            if(g[x][y+1]=='.' && !vis[x][y+1]){
                q.push({x,y+1});
                vis[x][y+1]=true;
                level[x][y+1]=level[x][y]+1;
            }
        }
        if(isvalid(x,y-1)){
            if(g[x][y-1]=='.' && !vis[x][y-1]){
                q.push({x,y-1});
                vis[x][y-1]=true;
                level[x][y-1]=level[x][y]+1;
            }
        }
    }
}

void solve(){
    ll n,m,k;
    cin>>n>>m>>k;
    for(ll i=0;i<510;i++){
        for(ll j=0;j<510;j++){
            vis[i][j]=false;
            g[i][j]='#';
            level[i][j]=INF;
        }
    }
    ll x=-1,y=-1;
    for(ll i=0;i<n;i++){
        for(ll j=0;j<m;j++){
            cin>>g[i][j];
            if(g[i][j]=='.' && x==-1 && y==-1){
                x=i;
                y=j;
            }
        }
    }
    bfs(x,y);
    set<pair<ll,pair<ll,ll>>> s;
    for(ll i=0;i<n;i++){
        for(ll j=0;j<m;j++){
            if(level[i][j]!=INF){
                s.insert({level[i][j],{i,j}});
            }
        }
    }
    while(k--){
        auto it=s.end();
        it--;
        pair<ll, pair<ll, ll>> a = *it;
        g[a.second.first][a.second.second] = 'X';
        s.erase(it);
    }
    for(ll i=0;i<n;i++){
        for(ll j=0;j<m;j++){
            cout<<g[i][j];
        }
        ce;
    }
}


int main(){
    int t=1;
    ios::sync_with_stdio(false);
    //cin>>t;
    while(t--){
        solve();
    }
}

/*
//-----------------DFS-----------------
vll g[N];
bool vis[N];

void dfs(ll vertex){
    vis[vertex] = true;
    for(auto child : g[vertex]){
        if(vis[child]) continue;
        dfs(child);
    }
    return;
}
*/

/*
//-------------------BFS-----------------
vll g[N];
bool vis[N];
ll level[N];
void bfs(ll source){
    queue<ll> q;
    q.push(source);
    vis[source] = true;
    while(!q.empty()){
        int cur_vertex = q.front();
        q.pop();
        for(auto child : g[cur_vertex]){
            if(!vis[child]){
                q.push(child);
                vis[child] = true;
                level[child] = level[cur_vertex] + 1;
            }
        }
    }
}

*/

/*
//---------------------Dijkstar-----------------
vp g[N];
vll vis(N,0);
vll dist(N,INF);
ll p[N+1]={-1};
void dij(ll source){
    set<pair<ll,ll>> s;
    s.insert({0,source});
    dist[source]=0;
    while(s.size()>0){
        pair<ll,ll> node=*s.begin();
        ll v = node.second;
        ll dista=node.first;
        s.erase(s.begin());
        if(vis[v]) continue;
        vis[v]=1;
        for(auto child:g[v]){
            ll child_v=child.first;
            ll wt=child.second;
            if(dist[v]+wt<dist[child_v]){
                dist[child_v]=dist[v]+wt;
                s.insert({dist[child_v],child_v});
                p[child_v]=v;
            }
        }
    }
    return;
}
*/

/*
ll vis2[N2][N2];
ll level2[N2][N2];
//------------------BFS-Shortest path-----------
int bfss(ll x,ll y,ll endx,ll endy){
    int sourcex = x;
    int sourcey = y;
    int destx = endx;
    int desty = endy;
    queue<pair<int,int>> q;
    q.push({sourcex,sourcey});
    vis2[sourcex][sourcey]=1;
    while(!q.empty()){
        pair<int,int> v = q.front();
        int x=v.fi;
        int y=v.se;
        q.pop();
        for(auto move: movement){
            int childx=move.fi + x;
            int childy=move.se + y;
            if(!isValid(childx,childy)) continue;
            if(!vis2[childx][childy]){
                q.push({childx,childy});
                g[childx][childy]=level2[x][y]+1;
                vis2[childx][childy]=1;
            }
        }
        if(level2[destx][desty]!=INF){
            break;
        }
    }
    return level2[destx][desty];
}


void reset(){
    for(int i=0;i<N2;i++){
        for(int j=0;j<N2;j++){
            level2[i][j]=INF;
            vis2[i][j]=0;
        }
    }
}
*/

/*
//---------Flloyd-Warshall-----------
ll dist[N3][N3]={INF};

void solve(){
    ll n,m;
    cin>>n;
    for(ll i=1;i<=n;i++){
        for(ll j=1;j<=n;j++){
            cin>>dist[i][j];
        }
    }
    vll v;
    for(ll i=0;i<n;i++){
        ll x;
        cin>>x;
        v.pb(x);
    }
    rev(v);
    vll ans;
    for(ll k=0;k<n;k++){
            ll k_v = v[k];
        for(ll i=1;i<=n;i++){
            for(ll j=1;j<=n;j++){
               ll newdis = dist[i][k_v]+dist[k_v][j];
               dist[i][j]=min(dist[i][j],newdis);
            }
        }
        ll sum=0;
    for(ll i=0;i<=k;i++){
        for(ll j=0;j<=k;j++){
                sum+=dist[v[i]][v[j]];
            }
        }
        ans.pb(sum);
    }
    rev(ans);
    for(ll i=0;i<n;i++){
        printb(ans[i]);
    }
    return;
}

*/

/*
//-------------------DSU-------------------
ll parent[N];
ll size[N];

void make(ll v){
    parent[v]=v;
    size[v]=1;
}

ll find(ll v){
    if(v==parent[v]) return v;
    return parent[v]=find(parent[v]);
}

void union(ll a, ll b){
    a=find(a);
    b=find(b);
    if(a!=b){
        if(size[a]<size[b]) swap(a,b);
        parent[b]=a;
        size[a]+=size[b];
    }
}
*/



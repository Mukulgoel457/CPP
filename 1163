//------------------Mukul457-----------------------------------
 
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
//template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
typedef tree<ll,null_type,less_equal<ll>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
 
ll mod = 1e9 + 7;
const int inf= 1e18;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}
 
bool isvalid(ll x,ll y,ll n,ll m){
    return x>=0 && y>=0 && x<n && y<m ;
}
 
int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;
 
    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow
 
         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}
 
bool is_prime[1000005];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}
 
 
ll ciel(ll a,ll b){
    if(a%b){return a/b+1;}
    else{return a/b;}
}
 
void solve(){
    ll n,k;
    cin>>n>>k;
    set<ll> a,b;
    a.insert(0);
    a.insert(n);
    b.insert(n);
    map<ll,ll> m;
    m[n]++;
    for(ll i=0;i<k;i++){
        ll x;
        cin>>x;
        auto it=a.lower_bound(x);
        auto it2=it;
        it2--;
        m[*it-*it2]--;
        ll z=*it-*it2;
        if(m[*it-*it2]==0) b.erase(b.find(z));
        m[*it-x]++;
        b.insert(*it-x);
        m[x-*it2]++;
        b.insert(x-*it2);
        auto it1=b.end();
        it1--;
        printb(*it1);
        a.insert(x);
    }
    ce;
}
 
int main(){
    int t=1;
    ios::sync_with_stdio(false);
    cin.tie(0);
    //cin>>t;
    while(t--){
        solve();
    }
}

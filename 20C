//May the code be with you!


#include <bits/stdc++.h>
#include<chrono>
using namespace std;
//template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
const int N = 1e5+1;
const int N2 =1e3+1;
const int INF= 1e18;


bool isValid(ll x,ll y){
    return x>=0 && y>=0 && x<N && y<N ;
}
/*
ll g[N];
bool vis[N];
ll level[N];
void bfs(ll source){
    queue<ll> q;
    q.push(source);
    vis[source] = true;
    while(!q.empty()){
        int cur_vertex = q.front();
        q.pop();
        for(auto child : g[cur_vertex]){
            if(!vis[child]){
                q.push(child);
                vis[child] = true;
                level[child] = level[cur_vertex] + 1;
            }
        }
    }
}

int getx(string s){
    return s[0]-'a';
}

int gety(string s){
    return s[1]-'1';
}
*/
vector<pair<int,int>> movement = {
    {-1,1},{1,1},
    {-1,-1},{1,-1},
};

vp g[N];
vll vis3(N,0);
vll dist(N,INF);
ll p[N+1]={-1};
void dij(ll source){
    set<pair<ll,ll>> s;
    s.insert({0,source});
    dist[source]=0;
    while(s.size()>0){
        pair<ll,ll> node=*s.begin();
        ll v = node.second;
        ll dista=node.first;
        s.erase(s.begin());
        if(vis3[v]) continue;
        vis3[v]=1;
        for(auto child:g[v]){
            ll child_v=child.first;
            ll wt=child.second;
            if(dist[v]+wt<dist[child_v]){
                dist[child_v]=dist[v]+wt;
                s.insert({dist[child_v],child_v});
                p[child_v]=v;
            }
        }
    }
    return;
}
/*

ll vis2[N2][N2];
ll level2[N2][N2];

int bfss(ll x,ll y,ll endx,ll endy){
    int sourcex = x;
    int sourcey = y;
    int destx = endx;
    int desty = endy;
    queue<pair<int,int>> q;
    q.push({sourcex,sourcey});
    vis2[sourcex][sourcey]=1;
    while(!q.empty()){
        pair<int,int> v = q.front();
        int x=v.fi;
        int y=v.se;
        q.pop();
        for(auto move: movement){
            int childx=move.fi + x;
            int childy=move.se + y;
            if(!isValid(childx,childy)) continue;
            if(!vis2[childx][childy]){
                q.push({childx,childy});
                g[childx][childy]=level2[x][y]+1;
                vis2[childx][childy]=1;
            }
        }
        if(level2[destx][desty]!=INF){
            break;
        }
    }
    return level2[destx][desty];
}


void reset(){
    for(int i=0;i<N2;i++){
        for(int j=0;j<N2;j++){
            level2[i][j]=INF;
            vis2[i][j]=0;
        }
    }
}
*/

void solve(){
    ll n,m;
    cin>>n>>m;
    for(ll i=0;i<m;i++){
        ll x,y,wt;
        cin>>x>>y>>wt;
        g[x].pb({y,wt});
        g[y].pb({x,wt});
    }
    p[1]=-1;
    dij(1);
    vll v;
    ll vertex=n;
    if(dist[vertex]==INF){
        print(-1);
        return;
    }
    while(vertex!=-1){
            v.pb(vertex);
            vertex=p[vertex];
    }
    rev(v);
    for(ll i=0;i<v.size();i++){
        printb(v[i]);
    }
    return;
}

int main(){
    int t=1;
    ios::sync_with_stdio(false);
    //cin>>t;
    while(t--){
        solve();
    }
}

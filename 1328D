//May the code be with you!


#include <bits/stdc++.h>
#include<chrono>
using namespace std;
template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
ll mod = 1e9 + 7;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}
bool is_prime[1000000];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}

int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}

ll ciel(ll a,ll b){
    if(a%b){return a/b+1;}
    else{return a/b;}
}

void solve(){
    ll n;
    cin>>n;
    vll v;
    map<ll,ll> m;
    for(ll i=0;i<n;i++){
        ll x;
        cin>>x;
        v.pb(x);
        m[x]++;
    }
    if(m.size()==1){
        print(1);
        for(ll i=0;i<n;i++){
            printb(1);
        }
        ce;
        return;
    }
    else{
        if(n%2==0){
            print(2);
            for(ll i=0;i<n;i++){
                if(i%2) printb(2);
                else printb(1);
            }
            ce;
            return;
        }
        else{
            ll ans[n];
            ans[0]=1;
            ll k=2,t=-1;
            for(ll i=1;i<n;i++){
                if(v[i]==v[i-1]){
                    t=i;
                    break;
                }
            }
            if(t>=0){
                print(2);
                for(ll i=1;i<n;i++){
                    if(t==i) ans[i]=ans[i-1];
                    else{
                        if(ans[i-1]==1) ans[i]=2;
                        else ans[i]=1;
                    }
                }
                for(ll i=0;i<n;i++){
                    printb(ans[i]);
                }
                ce;
                return;
            }
            for(ll i=1;i<n-1;i++){
                if(v[i-1]==v[i]){
                    ans[i]=ans[i-1];
                }
                else if(v[i]!=v[i-1]){
                    if(ans[i-1]==1) ans[i]=2;
                    else ans[i]=1;
                }
            }
            if(v[n-2]==v[n-1] && ans[n-2]==2){
                ans[n-1]=2;
                k=2;
            }
            else if(v[n-1]==v[0] && ans[n-2]==2){
                ans[n-1]=1;
                k=2;
            }
            else if(v[n-1]!=v[0] && ans[n-2]==2){
                ans[n-1]=3;
                k=3;
            }
            else if(ans[n-2]==1){
                ans[n-1]=2;
                k=2;
            }
                print(k);
            for(ll i=0;i<n;i++){
                 printb(ans[i]);
            }
            ce;
        }
    }

}

int main(){
    ll t=1;
    ios::sync_with_stdio(false);
    cin>>t;
    while(t--){
        solve();
    }
}

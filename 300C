//------------------Mukul457-----------------------------------

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
//template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define pie 3.141592653589793238462643383279502884197169399
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
typedef tree<ll,null_type,less_equal<ll>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

ll mod = 1e9 + 7;
const int inf= 1e18;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}

bool isvalid(ll x,ll y,ll n,ll m){
    return x>=0 && y>=0 && x<n && y<m ;
}

int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return left;
}

bool is_prime[1000005];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}

ll ciel(ll a,ll b){
    if(a%b){return a/b+1;}
    else{return a/b;}
}

ll mod_inverse(ll a, ll m) {
    ll m0 = m, t, q;
    ll x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    // Apply extended Euclid Algorithm
    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m, a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0)
        x1 += m0;

    return x1;
}


void solve(){
    ll a,b,n;
    cin>>a>>b>>n;
    ll x=max(a,b);
    ll y=min(a,b);
    vll v(n+1,0);
    ll z=1;
    v[0]=v[n]=1;
    for(ll i=1;i<=n/2;i++){
        z=(z*(n-i+1)%mod)*mod_inverse(i,mod)%mod;
        v[i]=z;
        v[n-i]=v[i];
    }
    ll ans=0,k=0;
    for(ll i=y*n;i<=x*n;i+=(x-y)){
        string z=to_string(i);
        map<ll,ll> m;
        for(ll j=0;j<z.length();j++){
            m[z[j]-'0']++;
        }
        k++;
        if(m.size()>2) continue;
        if(m.size()==2 && (m[x]==0 || m[y]==0)) continue;
        if(m.size()==1 && m[x]==0 && m[y]==0) continue;
        ans+=v[k-1];
        ans%=mod;
    }
    print(ans);
}

int main(){
    int t=1;
    ios::sync_with_stdio(false);
    cin.tie(0);
    //cin>>t;
    while(t--){
        solve();
    }
}

//May the code be with you!


#include <bits/stdc++.h>
using namespace std;
template <typename PB>
#define ll long long int
#define be begin()
#define en end()
#define pb push_back
#define pyes cout << "YES\n"
#define pno cout << "NO\n"
#define ce cout << '\n'
#define endl '\n'
#define print(x) cout<<x<<endl
#define printb(x) cout<<x<<" "
#define rev(v) reverse(v.begin(), v.end())
#define srt(v) sort(v.begin(), v.end())
#define all(v) v.begin(), v.end()
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define fi first
#define se second
#define vll vector<ll>
#define vp vector<pair<ll,ll>>
#define trav(v) for (auto it = v.begin(); it != v.end(); it++)
#define rep(i, n) for (ll i = 0; i < n; i++)
const ll mod = 1e9 + 7;
ll gcd(ll a, ll b){
  if (b == 0) return a;
  return gcd(b, a%b);
}
bool is_prime[1000000];
void sieve_of_eratosthenes(int n)
{
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p) {
                is_prime[i] = false;
            }
        }
    }
}

ll dfs(ll node, ll par, vector<vector<ll>>& adj)
{
    ll height = 1;
    for (auto nbr : adj[node])
    {
        if (nbr != par)
        {
            height = max(height, dfs(nbr, node, adj) + 1);
        }
    }
    return height;
}

int binary(const std::vector<ll>& arr, ll target) {
    int left = 0;
    int right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // Prevents potential overflow

         if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return left;
}

void solve(){
    ll n,a,b,ans=0;
    cin>>n>>a>>b;
    vector<tuple<ll,ll,ll>> v;
    for(ll i=0;i<n;i++){
        ll x,y;
        cin>>x>>y;
        v.pb({x*y,min(x,y),max(x,y)});
    }
    srt(v);
    rev(v);
    for(ll i=0;i<n;i++){
        ll x1 =get<1>(v[i]);
        ll y1 =get<2>(v[i]);
        ll pro1=get<0>(v[i]);
        if(x1>min(a,b)){
            continue;
        }
        for(ll j=i+1;j<n;j++){
            ll x2 =get<1>(v[j]);
            ll y2 =get<2>(v[j]);
            ll pro2=get<0>(v[j]);
            if(x2>min(a,b)){
                continue;
            }
            if(max(y1,y2)<=min(a,b)){
                if(x1+x2<=max(a,b)){
                    ans=max(ans,pro1+pro2);
                }
            }
            if(max(y1,y2)<=max(a,b)){
                    if(x1+x2<=min(a,b)){
                        ans=max(ans,pro1+pro2);
                    }
            }
            if(max(x1,x2)<=min(a,b)){
                if(y1+y2<=max(a,b)){
                    ans=max(ans,pro1+pro2);
                }
            }
            if((max(x1,y2)<=min(a,b))&&(x2+y1<=max(a,b))){
                ans=max(ans,pro1+pro2);
            }
            if((max(x2,y1)<=min(a,b))&&(x1+y2<=max(a,b))){
                ans=max(ans,pro1+pro2);
            }
        }
    }
    print(ans);
}

int main(){
    ll t=1;
    ios::sync_with_stdio(false);
    //cin>>t;
    while(t--){
        solve();
    }
}
